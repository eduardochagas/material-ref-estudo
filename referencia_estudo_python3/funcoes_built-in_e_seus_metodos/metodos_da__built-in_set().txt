#=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
# Tipo de dado: frozenset()
#=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-

Tipos de dados frozenset() são usados para CRIAR UMA LISTA NÃO-ORDENADA DE ITENS 
ÚNICOS (caso haja dados repetidos, a propria função remove esses dados 
repetidos automaticamente), a diferença é que os dados não podem ser 
alterados (não podemos adicionar e nem remover dados), mas podemos 
por exemplo juntar essa lista de dados com uma outra lista para obter-mos
uma terceira lista com todos os dados das duas listas dentro dessa terceira lista. 

ex:

fs1 = frozenset([2, 4, 3, 5, 'FBL', 87, 54])
fs2 = frozenset([33, 99, 67, 45, 2, 6, 4])
result = fs1.union(fs2)
print(result)
OBS: A estrutura do tipo frozenset possui métodos, 
estude sobre esses métodos depois em uma outra hora, OK?!!!


#=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
# Tipo de dado: set()
#=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-

Tipos de dados set() são usados para CRIAR UMA LISTA NÃO-ORDENADA DE 
ITENS ÚNICOS (caso haja dados repetidos, a propria função remove esses dados 
repetidos automaticamente).

# Exemplo de como pode ser configurado...
s = set([2, 4, 3, 5, 'FBL', 87, 54])


ex2:
# Outro exemplo de como pode ser configurado...
s = {'macarrão', 54, 72, 21, 90, 34}
OBS: A diferença de uma estrutura de dado do tipo set para uma estrutura 
de dado do tipo dicionário é que a estrutura do tipo dicionário é criada 
utilizando {chave: valor}, e a estrutura do tipo set não, o tipo set somente
insere os dados como uma lista.
OBS2: A estrutura do tipo set possui métodos para a manipulação dos dados, 
estude sobre esses métodos depois em uma outra hora, OK?!!!


#Metodos da função embutida (built-in) set()
#conjunto significa: conjunto de itens 

remove() - remove elemento a partir do conjunto de elementos.
add() - adiciona elementos ao conjunto.
-=-=-=-=-=-=-=-=-=--=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=--=-=-=-=-=-=-=-=-=--=-=-=-=--=-=-
copy() - retorna uma copia do conjunto de elementos. exemplo de como ele funciona, ex:
numeros = {1, 2, 3, 4}
novo_numeros = numeros.copy()

novo_numeros.add('5')

print(numeros)
print(novo_numeros)
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
clear() - remove todos os elementos.
defference() - retorna a diferença entre dois conjuntos de elementos, ex:
A = {'a', 'b', 'c', 'd'}
B = {'c', 'f', 'g'}

#retorna os itens que são diferentes entre as listas A e B.
print(A.defference(B))

#retorna os itens que são diferentes entre as listas B e A.
print(B.difference(A))
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
discard() - remove o elemento especificado no parametro do conjunto (se o elemento 
estiver no conjunto), ex:
numbers = {2, 3, 4, 5}

numbers.discard(3)
print('numbers =', numbers)

#aqui não remove o item pq ele não existe no conjunto (dicionario)
numbers.discard(10)
print('numbers =', numbers) 

inersection(*outros_conjuntos) - retorna um novo conjunto com elementos que são comums em todos os conjuntos. ex:
OBS:o parametro *outros_conjuntos significa que vc pode inserir quantos conjunto vc quiser como 
parametro para saber os elementos em comum que eles possuem.
OBS2:Se o argumento não é passado para intersection(), retorna uma copia superficial do conjunto de (A).
OBS3:O metodo intersection() não funciona com listas

A = {2, 3, 5, 4}
B = {2, 5, 100}
C = {2, 3, 8, 9, 10}

print(B.intersection(A))
print(B.intersection(C))
print(A.intersection(C))
print(C.intersection(A, B))

isdisjoint() - retorna True se dois conjuntos são desjuntados e False caso contrário. O metodo isdisjoint() leva
um unico argumento (um conjunto). Você pode também passar um 
iteravel (list, tuple, dictionary and string) para disjoint(). O metodo isdisjoint() irá
automaticamente converter iteraveis para conjunto e checar se o conjunto são desjuntos ou não, ex:
OBS: retorna True se ao juntar dois conjuntos, os items desses dois conjuntos se tornem
uma sequencia ordenada.
ex:

A = {1, 2, 3, 4}
B = {5, 6, 7}
C = {4, 5, 6}

print('Are A and B disjoint?', A.isdisjoint(B))
print('Are A and C disjoint?', A.isdisjoint(C))

issubset() - retorna true se todos os elementos de um conjunto estão presentes em
outro conjunto (passado como um argumento). Se não, retorna False, ex:


A = {1, 2, 3}
B = {1, 2, 3, 4, 5}
C = {1, 2, 4, 5}

# Returns True
print(A.issubset(B))

# Returns False
# B is not subset of A
print(B.issubset(A))

# Returns False
print(A.issubset(C))

# Returns True
print(C.issubset(B))

pop() - remove um elemento aleatório do conjunto e retorna o elemento removido,
caso o conjunto esteja vazio, uma excessão TypeError é levantada, ex:
OBS:O metodo pop() não leva nenhum argumento.

A ={'a', 'b', 'c', 'd'}

print('Return Value is', A.pop())
print('A = ', A)

symmetric_difference() - retorna um novo conjunto que é a diferença simetrica de 
dois conjuntos. A diferença simetrica dos dois conjuntos A e  B é o conjunto de
elementos qual estão dentro do conjunto A ou B, mas não em ambos, ex:


A = {'a', 'b', 'c', 'd'}
B = {'c', 'd', 'e' }
C = {}

print(A.symmetric_difference(B))
print(B.symmetric_difference(A))

print(A.symmetric_difference(C))
print(B.symmetric_difference(C))

union() - retorna um novo conjunto com distintos elementos a partir de todos os conjuntos.
em python, union() permite quantos numeros de argumentos quiser. O metodo union() 
retorna a uniao do conjunto A com todos os conjuntos (passados como argumento).
Se o argumento não é passado para union(), retorna uma copia superficial do conjunto, ex:

sintax: union(*other_sets)

A = {'a', 'c', 'd'}
B = {'c', 'd', 2 }
C= {1, 2, 3}

print('A U B =', A.union(B))
print('B U C =', B.union(C))

print('A U B U C =', A.union(B, C))

print('A.union() = ', A.union())

update() - adiciona elementos a partir de um conjunto (passado como um argumento) para o 
conjunto (chamando o metodo update()) Aqui, A e B são dois conjuntos. Os elementos do conjunto B são
adicionados para o conjunto A. O metodo update() leva somente um argumento (um conjunto). Se vc
precisar adicionar elementos de outros tipos de dados nativos (como tuple, list, dictionary etc...) para
o conjunto, vc pode simplesmente usar:
 
 # add list elements to set
 set.update(set(list))

ou até mais facil
 set.update(list)

exemplo de como usar o metodo update() abaixo:

sintaxe: A.update(B)

A = {'a', 'c', 'd'}
B = {'c', 'd', 2 }
C= {1, 2, 3}

print('A U B =', A.union(B))
print('B U C =', B.union(C))

print('A U B U C =', A.union(B, C))

print('A.union() = ', A.union())



