
'''
print() - imprime na tela
set(x) - retorna os elementos de uma lista de forma ordenada, garantindo a ausencia de cópias duplicadas. (essa função tem somente 1 argumento). 
tuple() - transforma o elemento em uma tupla.
ord() -  devolve o código numérico do caractere passado como parâmetro.
chr() - devolve o caracter corresponde ao código numérico passado como parâmetro.
dir() - mostra todas as funções de um modulo. (digite o nome do modulo entre os parenteses)
min() - mostra o menor valor de um grupo de valores armazenados em uma variavel (usado SOMENTE em numeros inteiros e de ponto flutuante).
max() - mostra o maior valor de um grupo de valores armazenados em uma variavel (usado SOMENTE em numeros inteiros e de ponto flutuante).
abs() - mostra o valor absoluto de um número, se o número é -4, o valor absoluto dele é 4, se o
numero é -8.0, o seu valor absoluto é 8.0, e assim por diante...
round() - arredonda o número ponto flutuante, se o numero for 10.4, arredonda para baixo, se tornando
o numero 10, se o número for 10.5, 10.6, arredonda para cima, se tornando o número 11. 
type() - retorna o tipo de dado inserido como parametro (se o dado é do tipo integer, string, float...).
bin() - retorna uma string exibindo o valor binario de um número inteiro (a string sempre inicia
 com os caracteres '0b' (zero b), que significa que é a representação binária de um número.)
int() - retorna o número como um número inteiro, ex: 8.5, retorna 8, 7.3, retorna 7,
 e assim por diante. 
   Também é usado para voltar um numero binário para inteiro, ex:
    0b1001 - o numero deve ser inserido sem as aspas...
    int(0b1001) = 9
    ou insere uma string como parametro para retornar o valor em número inteiro, ex:
    int('0b1001', 2)
    OBS:se o valor binario for inserido como uma string, é necessário inserir o 
     número 2 como segundo parametro (o numero 2 indica que é para calcular em base 2 - (base binária)),
    a string sempre inicia com os caracteres 0b (zero b), que significa que é
     a representação binária de um número.
    

   Também é usado para voltar um número hexadecimal para inteiro, ex:
    0x4ef - o número deve ser inserido sem aspas...
    int(0x4ef) = 1263
    OBS:se o valor binario for inserido como uma string, é necessário inserir o 
     número 16 como segundo parametro (o numero 16 indica que é para calcular em base 16 - (base hexadeciaml)),
    a string sempre inicia com os caracteres '0x' (zero x), que significa que é
     a representação em hexadecimal de um número.

   
   Também é usado para voltar um número octal para inteiro, ex:
    0o217 - o número deve ser inserido sem aspas...
    int(0o217) = 143
    OBS:se o valor binario for inserido como uma string, é necessário inserir o 
     número 8 como segundo parametro (o numero 8 indica que é para calcular em base 8 - (base octal)),
    a string sempre inicia com os caracteres '0o' (zero o), que significa que é
     a representação em octal de um número.
    
    

hex() - retorna uma string com o valor em hexadecimal. ex:
 hex(1263) retorna o valor '0x4ef'.
  O valor '0x' no inicio da string, significa que o valor é em hexadecimal.

oct() - retorna uma string com o valor em octal. ex:
 oct(143) retorna o valor '0o217'
  O valor '0o' (zero e ó) no inicio da string, significa que o valor é em octal.  

enumerate() - PASSA POR CADA ITEM do array RETORNANDO o ÍNDICE e o VALOR de CADA ITEM do array, ex:
    array = [1, 5, 'du', 'we', '7' ]
    for indice, valor in enumerate(array):
        print(indice, valor)

range() - gera números a partir do valor x, até um valor y, ex:
    range(6) # => [0, 1, 2, 3, 4, 5] # gera números de 0 até 5. 
    range(1, 6) # => [1, 2, 3, 4, 5] #gera números de 1 a 5.
    range(1, 6, 3) # => [1, 4] #gera números de 1 a 6, a cada 3 números.

map(x, y) - Essa função, em Python, serve para aplicarmos uma função a cada elemento de uma lista, 
 retornando uma nova lista contendo os elementos resultantes da aplicação da função. Considere o exemplo abaixo:
	
>>> import math
>>> lista1 = [1, 4, 9, 16, 25]
>>> lista2 = map(math.sqrt, lista1)
>>> print lista2
[1.0, 2.0, 3.0, 4.0, 5.0]


reduce() - Sua utilidade está na aplicação de uma função a todos os valores do conjunto,
 de forma a agregá-los todos em um único valor. Por exemplo, para aplicar a operação 
  de soma a todos os elementos de uma sequência, de forma que o resultado final seja a soma 
 de todos esses elementos, poderíamos fazer o seguinte:
	
>>> import operator #necessário para obter a função de soma
>>> valores = [1, 2, 3, 4, 5]
>>> soma = reduce(operator.add, valores)
>>> print soma

É claro que, para realizar a soma de todos os elementos de uma sequência, é muito mais claro utilizarmos a função sum():


filter() - Como o próprio nome já deixa claro, filter() filtra os elementos
 de uma sequência. O processo de filtragem é definido a partir de uma função que
  o programador passa como primeiro argumento da função. Assim, filter() só “deixa passar” para a 
 sequência resultante aqueles   elementos para os quais a chamada da função que o usuário 
  passou retornar True. Vejamos um exemplo:
	
>>> def maior_que_zero(x):
...     return x > 0
...
>>> valores = [10, 4, -1, 3, 5, -9, -11]
>>> print filter(maior_que_zero, valores)
[10, 4, 3, 5]

No exemplo acima, filter() chamou a função maior_que_zero para cada um dos elementos contidos 
 em valores. Se a função retornar True, o elemento é inserido na lista de resultado. Caso contrário, 
não o é. Ou seja, é feita a filtragem e só passam aqueles elementos que são maiores que zero.

super(x, y) - faz a ligação dos objetos da classe do parametro y na classe do parametro x.
OBS: na função super(), o y e definido com self, e não com o nome da
classe herdada (ou seja, não é usado o self em vez de o nome da classe).

PRIMEIRO EXEMPLO ABAIXO ( Sem o metodo super() ):
class Animal: #CLASSE y
    def __init__(anim, cor, genero, andar):
        anim.cor = cor
        anim.genero = genero
        anim.num_de_patas = andar 

    def falar(anim):
        print('Olá, sou um bixo da classe Animal e sei falar')

    def andar(anim):
        print('Estou andando sobre %i patas' %(anim.num_de_patas))

    def amamentar(anim):
        if anim.genero.lower() [0] == 'm':
            print('Machos não amamentam')
            return
        print('Amamentando meu filhote')

#Rex = Animal('marrom', 'macho', 4)
#Rex.falar()
#Rex.andar()
#Rex.amamentar()


class Pessoa(Animal):
    pass

#Ao herdar a classe Animal para a classe Pessoa, vc consegue acessar/chamar todos os
#metodos da classe Animal usando a classe Pessoa, ex:
OBS: Não definimos nada na classe Pessoa, mas ela herda tudo da classe Animal.
du = Pessoa('branco', 'masc', 2)
du.falar()
du.andar()
du.amamentar()

-=-=-=-=-=-=-=-=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=--=-=-=-=-=-=-=-=-=-=--=-=-=-=-=-=-=-=-=
SEGUNDO EXEMPLO ABAIXO ( Sem o metodo super() ):
class Animal: #CLASSE y
    def __init__(anim, cor, genero, andar):
        anim.cor = cor
        anim.genero = genero
        anim.num_de_patas = andar 

    def falar(anim):
        print('Olá, sou um bixo da classe Animal e sei falar')

    def andar(anim):
        print('Estou andando sobre %i patas' %(anim.num_de_patas))

    def amamentar(anim):
        if anim.genero.lower() [0] == 'm':
            print('Machos não amamentam')
            return
        print('Amamentando meu filhote')

#Rex = Animal('marrom', 'macho', 4)
#Rex.falar()
#Rex.andar()
#Rex.amamentar()


class Pessoa(Animal):
    def falar(self):
    	print('Eu sou um bixo da classe Pessoa e sei falar')

#caso vc DEFINA UM MÉTODO na CLASSE ATUAL (classe Pessoa) com O MESMO NOME DO MÉTODO da CLASSE HERDADA (classe Animal), ao 
#chamar a classe atual com o método de mesmo nome da classe herdada, será chamado o
#metodo da classe atual, pq o método da classe atual SOBREPÕE O METODO da classe herdada!.  
alex = Pessoa('branco', 'macho', 2)
alex.falar() #chama o método da classe Pessoa, pq sobrepõe o metodo da classe Animal.
alex.andar() #chama o método da classe Animal

-=-=-=-=-=-=-=-=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=--=-=-=-=-=-=-=-=-=-=--=-=-=-=-=-=-=-=-=
TERCEIRO EXEMPLO ABAIXO ( Sem o metodo super() ):
class Animal: #CLASSE y
    def __init__(anim, cor, genero, andar):
        anim.cor = cor
        anim.genero = genero
        anim.num_de_patas = andar 

    def falar(anim):
        print('Olá, sou um bixo da classe Animal e sei falar')

    def andar(anim):
        print('Estou andando sobre %i patas' %(anim.num_de_patas))

    def amamentar(anim):
        if anim.genero.lower() [0] == 'm':
            print('Machos não amamentam')
            return
        print('Amamentando meu filhote')

#Rex = Animal('marrom', 'macho', 4)
#Rex.falar()
#Rex.andar()
#Rex.amamentar()


class Pessoa(Animal):
    def falar(self):
    	print('Eu sou um bixo da classe Pessoa e sei falar')

    def cor_do_pelo(self):
        print('A cor do pelo é preta')

#caso vc DEFINA UM MÉTODO na CLASSE ATUAL (classe Pessoa) com O MESMO NOME DO MÉTODO da CLASSE HERDADA (classe Animal), ao 
#chamar a classe atual com o método de mesmo nome da classe herdada, será chamado o
#metodo da classe atual, pq o método da classe atual SOBREPÕE O METODO da classe herdada!.  

alex = Pessoa('branco', 'macho', 2)
alex.falar() #chama o método da classe Pessoa, pq sobrepõe o metodo da classe Animal.
alex.andar() #chama o método da classe Animal
alex.cor_do_pelo() #chama o metodo que somente foi criado na classe Pessoa normalmente.


-=-=-=-=-=-=-=-=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=--=-=-=-=-=-=-=-=-=-=--=-=-=-=-=-=-=-=-=
QUARTO EXEMPLO ABAIXO ( COM O METODO super() ):
class Animal: #CLASSE y
    def __init__(anim, cor, genero, andar):
        anim.cor = cor
        anim.genero = genero
        anim.num_de_patas = andar

    def falar(anim):
        print('Olá, sou um bixo da classe Animal e sei falar')

    def andar(anim):
        print('Estou andando sobre %i patas' %(anim.num_de_patas))

    def amamentar(anim):
        if anim.genero.lower() [0] == 'm':
            print('Machos não amamentam')
            return
        print('Amamentando meu filhote')

#Rex = Animal('marrom', 'macho', 4)
#Rex.falar()
#Rex.andar()
#Rex.amamentar()
 
#A classe que herda outra classe funciona normalmente caso não defina a função __init__() (aquela que inicia
# as 'variáveis da classe'), pq ela herda a função __init__() da classe que foi passada como herança (que no caso é da classe Animal). 
class Pessoa(Animal): #CLASSE x

    def falar(self):
        super(Pessoa, self).falar() #pegando EXATAMENTE a mesma função da classe Animal e usando na classe Pessoa.
        #OBS:o primeiro parametro da função super() significa:  para a classe... (no caso, Pessoa), e o segundo parametro recebe (self) pq como
        #a classe Pessoa herda todos os metodos da classe Animal, o self significa: de todos os metodos herdados na classe Animal,
        #eu quero usar o metodo... aí vc insere depois do super() o ponto seguido do nome do metodo definido na 
        #classe Animal (que no caso é o metodo .falar()), dessa forma: super(Pessoa, self).falar(), e usa ele. 

Hugo = Pessoa('branco', 'masculino', 2)
Hugo.andar()
Hugo.falar()#aqui o metodo da classe Pessoa chama o metodo da classe Animal, pq foi usado o metodo super() para chamar/usar A MESMA FUNÇÂO já definida na classe Animal.


-=-=-=-=-=-=-=-=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=--=-=-=-=-=-=-=-=-=-=--=-=-=-=-=-=-=-=-=

QUINTO EXEMPLO ABAIXO ( COM O METODO super() ):
class Animal: #CLASSE y
    def __init__(anim, cor, genero, andar):
        anim.cor = cor
        anim.genero = genero
        anim.num_de_patas = andar

    def falar(anim):
        print('Olá, sou um bixo da classe Animal e sei falar')

    def andar(anim):
        print('Estou andando sobre %i patas' %(anim.num_de_patas))

    def amamentar(anim):
        if anim.genero.lower() [0] == 'm':
            print('Machos não amamentam')
            return
        print('Amamentando meu filhote')

#Rex = Animal('marrom', 'macho', 4)
#Rex.falar()
#Rex.andar()
#Rex.amamentar()


class Pessoa(Animal): #CLASSE x
    def __init__(anim, cor, genero, andar): #o anim é só uma referencia para saber que foi herdado da classe Animal, mas usa-se o self como padrão.
        super(Pessoa, anim).__init__(cor, genero, andar) #aqui tbm poderia ser com self no lugar do anim.
        anim.cabelo = 'Castanho'

    def falar(self):
        super(Pessoa, self).falar() #pegando EXATAMENTE a mesma função da classe Animal e usando na classe Pessoa.
        #OBS:o primeiro parametro da função super() significa:  para a classe... (no caso, Pessoa), e o segundo parametro recebe (self) pq como
        #a classe Pessoa herda todos os metodos da classe Animal, o self significa: de todos os metodos herdados na classe Animal,
        #eu quero usar o metodo... aí vc insere depois do super() o ponto seguido do nome do metodo definido na 
        #classe Animal (que no caso é o metodo .falar()), dessa forma: super(Pessoa, self).falar(), e usa ele. 

Hugo = Pessoa('branco', 'masculino', 2)
#Hugo.andar()
Hugo.falar()#aqui o metodo da classe Pessoa chama o metodo da classe Animal, pq foi usado o metodo super() para chamar/usar A MESMA FUNÇÂO já definida na classe Animal.

-=-=-=-=-=-=-=-=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=--=-=-=-=-=-=-=-=-=-=--=-=-=-=-=-=-=-=-=
SEXTO EXEMPLO ABAIXO ( COM O METODO super() ):
class Animal: #CLASSE y
    def __init__(anim, cor, genero, andar):
        anim.cor = cor
        anim.genero = genero
        anim.num_de_patas = andar

    def falar(anim):
        print('Olá, sou um bixo da classe Animal e sei falar')

    def andar(anim):
        print('Estou andando sobre %i patas' %(anim.num_de_patas))

    def amamentar(anim):
        if anim.genero.lower() [0] == 'm':
            print('Machos não amamentam')
            return
        print('Amamentando meu filhote')

#Rex = Animal('marrom', 'macho', 4)
#Rex.falar()
#Rex.andar()
#Rex.amamentar()

#Caso vc herde uma classe e queira definir mais parametros de inicialização além dos já definidos (que são os
#parametros já definidos na classe herdada Animal),vc cria a função de inicialização, insere todos os parametros
#que vc quer (no caso, (cor, genero, andar, velocidade, pulo, audicao) ),na linha seguinte,defina a 
#função super da seguinte forma: super(Pessoa, self).__init__() e dentro do __init__ da função super(), insira
#todos os parametros já configurados do def __init__() da classe herdada, que no caso é: (cor, genero, andar), e
#pronto, vc terá EXATAMENTE as mesmas configurações de parametro da classe herdada, só que com mais funcionalidades
#na classe herdada.  
class Pessoa(Animal): #CLASSE x
    def __init__(self, cor, genero, andar, velocidade, pulo, audicao): 
        super(Pessoa, self).__init__(cor, genero, andar)#pega (cor, genero, andar) já criados da classe herdada.
	self.velocidade = velocidade
	self.pulo = pulo
	self.audicao = audicao
        

    def falar(self):
        super(Pessoa, self).falar() #pegando EXATAMENTE a mesma função da classe Animal e usando na classe Pessoa.
        #OBS:o primeiro parametro da função super() significa:  para a classe... (no caso, Pessoa), e o segundo parametro recebe (self) pq como
        #a classe Pessoa herda todos os metodos da classe Animal, o self significa: de todos os metodos herdados na classe Animal,
        #eu quero usar o metodo... aí vc insere depois do super() o ponto seguido do nome do metodo definido na 
        #classe Animal (que no caso é o metodo .falar()), dessa forma: super(Pessoa, self).falar(), e usa ele. 

Hugo = Pessoa('branco', 'masculino', 2, '50km/h', '3m', 'apurada')
#Hugo.andar()
Hugo.falar()#aqui o metodo da classe Pessoa chama o metodo da classe Animal, pq foi usado o metodo super() para chamar/usar A MESMA FUNÇÂO já definida na classe Animal.

-=-=-=-=-=-=-=-=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=--=-=-=-=-=-=-=-=-=-=--=-=-=-=-=-=-=-=-=
#Entendendo como funciona o acesso das variáveis de inicialização
class Car(object):
  condition = "new"
  def __init__(self, model, color, mpg):
    self.model = model
    self.color = color
    self.mpg  = mpg


my_car = Car("DeLorean", "silver", 88)
print(my_car.condition)
print(my_car.model)
print(my_car.color)
print(my_car.mpg)

-=-=-=-=-=-=-=-=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=--=-=-=-=-=-=-=-=-=-=--=-=-=-=-=-=-=-=-=
#Uma outra forma de configurar herança de classes SEM USAR o metodo super() é
#a seguinte, ex:
class Car(object):
    condition = "new"
    def __init__(self, model, color, mpg):
        self.model = model
        self.color = color
        self.mpg = mpg

    def display_car(self):
        print("This is a {} {} with {} MPG.".format(self.color, self.model, str(self.mpg)))

    def drive_car(self):
        self.condition = "used"

class ElectricCar(Car):
    def __init__(self, model, color, mpg, battery_type):
        self.model = model #você pode configurar as variáveis de inicialização
        self.color = color #herdadas da classe (no caso, da classe Car) desse
        self.mpg = mpg #jeito aqui, essa é uma forma diferente do metodo super(),
        self.battery_type = battery_type #mas que também tá certa.

my_car = ElectricCar("Fiat", "147", 88, "monten salt")
print(my_car)
print(my_car.model)



-=-=-=-=-=-=-=-=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=--=-=-=-=-=-=-=-=-=-=--=-=-=-=-=-=-=-=-=
#você pode também mudar valores das variáveis de inicialização na classe herdeira, ex:
class Car(object):
  condition = "new" #essa variável de inicialização MUDA DE VALOR na classe ElectricCar
  def __init__(self, model, color, mpg):
    self.model = model
    self.color = color
    self.mpg   = mpg
   
  def display_car(self):
    print "This is a %s %s with %s MPG." % (self.color, self.model, str(self.mpg))
    
  def drive_car(self):
    self.condition = "used"
    
class ElectricCar(Car):
  def __init__(self, model, color, mpg, battery_type):
    self.model = model
    self.color = color
    self.mpg   = mpg
    self.battery_type = battery_type
    
  def drive_car(self):
    self.condition = "like new" #aqui foi mudado o valor da variável de inicialização que foi
                                #herdada da classe Car. (isso pode ser feito sem problemas).

my_car = ElectricCar("DeLorean", "silver", 88, "molten salt")

print(my_car.condition) #variavel de inicialização herdada da classe Car com valor normal (Não alterado).
print(my_car.drive_car()) #variavel de inicialização herdada da classe Car com valor alterado e usado em um método.
print(my_car.condition) #variavel de inicialização herdada da classe Car com valor alterado para 'like new' após 
usado o metodo da classe ElectricCar, pq após o uso do metodo drive_car() (e só após o uso do metodo drive_car() ), o valor 
da variável condition dentro da classe ElectricCar, muda para 'like new'.

-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-	

eval() - O método eval() analisa a expressão passada para esse método e executa a expressão python (código) dentro 
do programa. Em simples termos, o metodo eval() roda o codigo python (qual é passado como um argumento) dentro do 
programa.

a sintaxe de eval() é: eval(expressão, globals= None, locals=None)

O metodo eval() leva três parametros:
expressão: esta string como analisado e avaliado como uma expressao (código) python.
globals: (opcional) um dicionário
locals (opcional) um objeto mapeado. Dicionarios são o padrão e comumente usados como tipo de 
mapeamento em python.

ex:

x = 1
print(eval('x + 1'))

#retorna o valor 2
2

no código acima, o metodo eval() avalía a expressão x + 1 e imprime.

exemplo 2:
# Perimeter of Square
def calculatePerimeter(l):
  return 4*l

# Area of Square
def calculateArea(l):
  return l*1

property = input("Type a function: ")

for l in range(1, 5):
    if (property == 'calculatePerimeter(l)'):
        print("If length is ", l , ", Perimeter = ", eval(property))
    elif (property == 'calculateArea(l)'):
	print("If length is ", l , ", Area = ", eval(property))
    else:
      print('Wrong Function')
      break

a saida do programa acima irá ser:
Type a function:  calculateArea(l)
If length is  1 , Area =  1
If length is  2 , Area =  2
If length is  3 , Area =  3
If length is  4 , Area =  4 

