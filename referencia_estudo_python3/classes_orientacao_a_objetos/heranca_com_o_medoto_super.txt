# superclasse - é um nome utilizado por programadores python para dizer  
# que uma classe será usada como herança em uma subclasse.

# subclasse - é um nome utilizado por programadores python para dizer 
# que é a classe que está herdando uma outra classe. 


#-=-=-=-=-=-=-=-==-=-=-=-=-=-=-=-=-=-=--==-=-=-=-=-=-=-=-=-=-=-=-=-=-=
# vamos ao exemplo de herança de classe com essas duas classes abaixo:
#-=-=-=-=-=-=-=-==-=-=-=-=-=-=-=-=-=-=--==-=-=-=-=-=-=-=-=-=-=-=-=-=-=

class Mamifero:
    def __init__(self, corDePelo, genero, andar):
        self.corDePelo = corDePelo
        self.genero = genero
        self.numDePatas = andar

    def falar(self):
        print('Olá, sou um mamifero e eu sei falar')

    def andar(self):
        print('Estou andando sobre {} patas'.format(self.numDePatas))

    def amamentar(self):
        if self.genero.lower()[0] == 'm':
            print('machos não amamentam')
        else:
            print('Amamentando meu filhote')


class Pessoa(Mamifero):

    na subclasse (no caso a classe Pessoa), adicione normalmente todos os parâmetros que vc deseja que essa subclasse tenha em seu construtor __init__, criando os parâmetros como fazemos normalmente em qualquer classe.  

    def __init__(self, corDePelo, genero, andar, cabelo):

        o método built-in especial chamado super() é usado para herdar o (construtor __init__ com seus parâmetros) da classe Mamífero. 

        No primeiro parametro do metodo built-in do python chamado: super(), vc insere o NOME DA CLASSE que está herdando (nesse caso, é o nome da classe Pessoa), e no segundo parâmetro, vc insere o self (esse self é o self da CLASSE QUE RECEBE a herança, no caso, é o self da classe Pessoa) seguido do .__init__ com os parâmetros da classe herdada, que no caso são: corDePelo, genero e andar (que é da classe Mamifero), ou seja, TODOS OS PARÂMETROS HERDADOS DA CLASSE Mamifero SERÃO ATRIBUIDOS OS PARÂMETROS DE MESMO NOME NA CLASSE Pessoa. Exemplo do que eu disse acima, na linha abaixo:
        
        super(Pessoa, self).__init__(corDePelo, genero, andar)


        Vocẽ pode adicionar mais parâmentros além dos que já foram herdados, adicionando normalmente o parametro dentro das aspas do __init__ do construtor da subclasse (nesse caso, da classe Pessoa), ou simplesmente adicione uma propriedade na classe sem inserir um parametro no construtor, (no caso, da classe Pessoa).
        self.cabelo = cabelo
        self.corDosOlhos = 'marrom' 

    def falar(self):
        # Vc pode usar o built-in super() tbm para herdar um método da superclasse.
        super(Pessoa, self).falar()
        
        OBS: Caso vc herde uma classe para outra classe, e as duas classes contenha metodos de nomes iguais,
        o método da classe que herda (que é a subclasse) irá sobrepor 
        o método da classe herdada (que é a superclasse), CUIDADO!!!



    exemplo do código limpo, sem as anotações, para ser executado:

        class Mamifero:
            def __init__(self, corDePelo, genero, andar):
                self.corDePelo = corDePelo
                self.genero = genero
                self.numDePatas = andar

            def falar(self):
                print('Olá, sou um mamifero e eu sei falar')

            def andar(self):
                print('Estou andando sobre {} patas'.format(self.numDePatas))

            def amamentar(self):
                if self.genero.lower()[0] == 'm':
                    print('machos não amamentam')
                else:
                    print('Amamentando meu filhote')


        class Pessoa(Mamifero):

            def __init__(self, corDePelo, genero, andar, cabelo):   
                super(Pessoa, self).__init__(corDePelo, genero, andar)

                self.cabelo = cabelo
                self.corDosOlhos = 'marrom' 

            def falar(self):
                # Vc pode usar o built-in super() tbm para herdar um método da superclasse.
                super(Pessoa, self).falar()

