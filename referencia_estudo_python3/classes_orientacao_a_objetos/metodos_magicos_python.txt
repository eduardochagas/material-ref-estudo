#####################################
# Métodos Mágicos Python
#####################################

OBS: A intenção de utilizarmos os métodos especiais é de esconder alguns detalhes de nossa classe (se no caso forem implementado dentro de uma classe, é claro) e evitar o acesso direto á alguma(s) propriedade(s) dentro da classe.

OBS2: O Python possui vários métodos mágicos, metodos especiais que têm o formato __nome__. Esses métodos permitem dar outro comportamento a nossas classes e usá-las quase que como classes da própria linguagem. A utilização desses métodos mágicos não é obrigatória, mas possibilita uma grande flexibilidade para nossas classes. 

__len__ - representa o método len().

__iter__ - representa o loop for.

__getitem__ - representa a busca de um indice em uma lista, ex: lista[n]

__lt__ - representa o sinal de menor que (<).
OBS: Caso implemente esse método na classe, se o valor for MENOR que outro, retornará True, senão retorna False. Ele fará a comparação se é maior ou menor mesmo que o método __gt__ não tenha sido implementado na classe. 

__gt__ - representa o sinal de maior que (>).
OBS: Caso implemente esse método na classe, se o valor for MAIOR que outro, retornará True, senão retorna False. Ele fará a comparação se é maior ou menor mesmo que o método __lt__ não tenha sido implementado na classe.

__eq__ - representa o sinal de igualdade (==).
OBS: Caso implemente esse método na classe, se o valor for IGUAL ao outro, retornará True, senão retorna False. Ele fará a comparação se é igual ou diferente mesmo que o método __neq__ não tenha sido implementado na classe.

__neq__ - representa o sinal de diferente (!=).
OBS: Caso implemente esse método na classe, se o valor for DIFERENTE que outro, retornará True, senão retorna False. Ele fará a comparação se é maior ou menor mesmo que o método __eq__ não tenha sido implementado na classe.

__ge__ - representa o sinal de maior igual (>=).

__le__ - representa o sinal de menor igual (<=).

__repr__ - usado para retornar uma representação da classe.

	ex:
		class Valores:

		    def __init__(self, x, y):
		        self.x = x
		        self.y = y


		    def __repr__(self):
		        return 'Valores({0}, {1})'.format(self.x, self.y)

		v = Valores(5, 7)
		print(v)




