64+32+16+8+4+2+0 = 
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
Sistema de Base Numérica
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-

Sistema decimal = O nosso sistema de base 10, ex:
0, 1, 2, 3, 4, 5, 6, 7, 8, 9
12, 13, 14, 15
OBS: quando diz que o sistema é de base 10, significa que não importa o tamanho do
número, o número sempre vai conter numeros de 0 a 9.

Sistema binário = Sistema de base 2, ex:
1001 = 1 * 2**3 + 0 * 2**2 + 0 * 2**1 + 1 * 2**0 = 8 + 0 + 0 + 1 = 9
       1 *  8   + 0 *  0   + 0 *  0   + 1 *  1   = 9
Obs: lembrando que é mais fácil fazer o calculo dos números binários
 da direita para a esquerda.

Sistema Hexadecimal = Sistema de Base 16, ex:
0 1 2 3 4 5 6 7 8 9 a  b  c  d  e  f
0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15
4ef = 4 * 16**2 + 14 * 16**1 + 15 * 16**0 = 1263
      4 *  256  + 14 *  16   + 15 *   1   = 1263

Sistema Octal = Base 8, ex:
0 1 2 3 4 5 6 7
217 = 2 * 8**2 + 1 * 8**1 + 7 * 8**0 = 143
      2 *  16  + 1 *  8   + 7 *  1   = 143

Python lida bem com todos esses sistemas
Temos até funções pré-definidas em python para
lidar com isso.

-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
Operaçoes Bitwise
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-

Shift Left - Move a parte representativa (o numero 1 binario) para o tanto de casas
 definidas de casas a esquerda (no caso, o numero 2) das casas binarias,
  ex: 
   0b0000001 << 2  resultado: 4
   1 << 2 ==> 0b000100 = resultado: 4
  
Shift Right - Move a parte representativa (o numero 1 binario) para o tanto de casas
 definidas de casas a direita (no caso, o numero 3) das casas binarias,
  ex:
   0b0010100 >> 3 resultado: 2
   20 >> 3 ==> 0b0000010 resultado: 2

-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
Operadores de comparação de Bit
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
Bit AND = &
Lembre-se que o número 1 = True e 0 = false, então se fizermos as 
 seguintes operações, teriamos:
  1 and 1 = 1
  1 and 0 = 0
  0 and 1 = 0
  0 and 0 = 0

Quando fazemos o operador bit AND entre dois números, nós pegamos 
 a representação binária desses números e realizamos
a operação de AND para cada bit que representa os números, Exemplo:
 a:	00101010 # que é o número 42 em binário
 b:	00001111 # que é o número 15 em binário
 ================
        00001010 # que é o número 10 em binário

 a & b - faz a comparação binária entre cada par de numeros de a com o de b e retorna o numero 10.
 42 & 15 - você pode fazer a comparação com os números diretamente tbm.
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
Bit OR = |
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
Lembre-se que o número 1 = True e 0 = False, então se fizemos as
 seguintes operações, teriamos:
  1 or 1 = 1
  1 or 0 = 1
  0 or 1 = 1
  0 or 0 = 0  

Quando fazemos o operador bit OR entre dois números, nós pegamos a 
 representação binária desses números e realizamos a operação de OR para
cada bit que representa os números, Exemplo:
 a:	00101010 # que é o número 42 em binário
 b:	00001111 # que é o número 15 em binário
 ================
        00101111 # que é o número 47 em binário

a | b - faz a comparação binária entre cada par de numeros de a com o de b e retorna o numero 47.
42 | 15 - você pode fazer a comparação com os números diretamente tbm.

-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
Bit XOR = ^ = exclusive or
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
Neste caso as operações são um pouco mais complicadas.
 Nós somamos os dois bit (soma normal 1+0 = 1, 1+1 = 2) e
tiramos o resto da divisão por 2 (binarios % 2 == 0) para obter o bit do novo número, teríamos as seguintes respostas para as seguintes operações:

 1 xor 1 = 0 # a comparaçao se faz assim: 1 + 1 = 2, se o resto da divisão por 2 for igual a 0 (2 % 2 == 0), entao é 0, ou seja, é False
 1 xor 0 = 1 # a comparaçao se faz assim: 1 + 0 = 1, se o resto da divisão por 2 for igual a 1 (1 % 2 == 1), entao é 1. ou seja, é True
 0 xor 1 = 1 # a comparaçao se faz assim: 0 + 1 = 1, se o resto da divisão por 2 for igual a 1 (1 % 2 == 1), entao é 1. ou seja, é True
 0 xor 0 = 0 # a comparaçao se faz assim: 0 + 0 = 0, se o resto da divisão por 2 for igual a 0 (0 % 2 == 0), entao é 0. ou seja, é False

 a:	00101010 # que é o número 42 em binário
 b:	00001111 # que é o número 15 em binário
 ================
        00100101 # que é o número 37 em binário

a ^ b - faz a comparação binária entre cada par de numeros de a com o de b e retorna o numero 37.
42 ^ 15 - você pode fazer a comparação com os números diretamente tbm.

-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
Bit Negação = ~ = NOT
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
88~






eduardo chagas rodrigues
Alex de oliveira
weverton ferreira
eduarda oliveira ferreira
