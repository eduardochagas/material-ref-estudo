#############################
	Curso Django
#############################


	***********************************
		Primeiros passos 
	    (documentação para praticar)
	***********************************

		Essa documentação está sendo feita com o intuito de deixar vc
		familiarizado (de forma prática) com os conceitos básicos do
		framework django. 

		Ligue o computador e execute tudo que está nesse documento !!!!  


	=========================================
	Preparando o ambiente de desenvolvimento
	=========================================

	Requisitos para instalar o django:

		- python3.x

		- ambiente virtual (utilizaremos o programa: venv, que ja vem com o python3)
		    OBS: existem outros programas para a criação de ambientes virtuais, como por
		    exemplo o famoso: virtualenv, mas como o python3 já possui um programa para 
		    a criação de ambientes virtuais (ou seja, o programa: venv), por padrão, é melhor 
		    utilizarmos ele. 
		
		-pip (usado para a instalação do django)
		    OBS: o pip é o instalador de pacotes do python, é com ele que instalamos os
		    programas do python.



	Antes de tudo, vamos aprender a INSTALAR e CRIAR UM AMBIENTE VIRTUAL, para que possamos
	criar cada projeto de forma separada e independente.

		primeiro criamos uma pasta (onde iremos inserir o(s) projeto(s))

			mkdir nomeDaPastaDoProjeto


		em seguida, entre na pasta do projeto:

	    	cd nomeDaPastaDoProjeto 


	agora, dentro da pasta do projeto, crie o ambiente virtual (usando o programa: venv) para 
	desenvolver a aplicação django (é assim que criamos vários projetos de forma individual, 
	usando ambientes virtuais).

	   	python3 -m venv nomeDoAmbienteVirtual 

	   	    OBS: caso o comando não funcione, instale o programa de ambiente virtual 
	   	    do python chamado: venv, com o comando:

	   	    	sudo apt-get install python3.x-venv 


	após criar o ambiente virtual, vamos ATIVAR O AMBIENTE VIRTUAL com o comando: source

	   	no linux:

			source nomeDoAmbienteVirtual/bin/activate


	    no Windows:

			source nomeDoAmbienteVirtual/Scripts/activate

	    OBS: repare que após usar o comando source para ativar o ambiente virtual, aparecerá no 
	    começo da linha no terminal entre parênteses o nome do ambiente virtual. Isso indica que o 
	    ambiente virtual foi ativado com sucesso e já está funcionando.

	    OBS2: para desativar o ambiente virtual, basta digitar no terminal a palavra: deactivate.


	e pronto, todo o ambiente necessário para a utilização do django foi criado. \0/



	====================
	Instalando o django
	====================

	agora, com O AMBIENTE VIRTUAL ATIVADO, vamos instalar o django:

	   	na versão python3: 

	   		pip3 install django

	---------------------------------------------------
	caso queira saber se realmente o django foi instalado, use o comando abaixo, que será mostrado no 
	terminal a versão do django instalada:

	    django-admin --version



	==================================
	Criando o primeiro projeto django
	==================================

	Quando instalamos o django, por padrão ele possui um comando chamado: django-admin, que 
	é usado para a administação dos projetos django. Esse comando possui alguns parâmetros:


		veja os comandos existentes para o comando django-admin:

			changepassword - 
			createsuperuser - cria novos usuarios.
			remove_stale_contenttypes - 
			check -
			compilemessages -
			createcachetable -
			dbshell - acessa o banco de dados através da linha de comando, ou seja, você pode executar comandos sql do banco, por exemplo, diretamente do terminal.
			diffsettings -
			dumpdata -
			flush -
			inspectdb - retorna todos os modelos django que geraram as tabelas do banco de dados.
			loaddata - carrega dados iniciais a partir de um json, por exemplo: django-admin loaddata fixtures.json
			makemessages -
			makemigrations - cria novas migrações baseadas nas mudanças detectadas (nas classes) no arquivo: models.py, do django.
			migrate - sincroniza o banco de dados com as novas migraçoes (alterações feitas no arquivo models.py).
			runserver - roda o servidor local do projeto django.
			sendtestemail -
			shell - inicializa um interpretador Python interativo.
			showmigrations -
			sqlflush -
			sqlmigrate -
			sqlsequencereset -
			squashmigrations -
			startapp - cria novas apps (cria novos módulos em um projeto).
			startproject - cria novos projetos.
			test - roda os testes da aplicação.
			testserver -
			clearsessions -
			collectstatic -
			findstatic -
			runserver -



	Para criarmos o nosso primeiro projeto, utilizamos o comando:

	    django-admin startproject nomeDoProjeto .

	    	OBS: o ponto inserido no final do comando indica que os arquivos gerados
	    	a partir desse comando serão armazenados no diretório atual onde 
	    	estivermos na linha do terminal. 

	---------------------------------------------------
	depois de criado o projeto, vamos entrar no nosso projeto:

	    cd nomeDoProjeto

	---------------------------------------------------
	repare que, ao executar o comando: django-admin startproject nomeDoProjeto ., foi gerado
	um arquivo de nome: manage.py e uma pasta com o nome "nomeDoProjeto".

	    O arquivo manage.py é o arquivo que utilizaremos para usar os comandos do django.

	    	
	    	veja os comandos existentes para o comando manage.py:

	    		check -
				compilemessages -
				createcachetable -
				dbshell - acessa o banco de dados através da linha de comando, ou seja, você pode executar comandos sql do banco, por exemplo, diretamente do terminal.
				diffsettings -
				dumpdata -
				flush -
				inspectdb - retorna todos os modelos django que geraram as tabelas do banco de dados.
				loaddata - carrega dados iniciais a partir de um json, por exemplo: django-admin loaddata fixtures.json
				makemessages -
				makemigrations - cria novas migrações baseadas nas mudanças detectadas (nas classes) no arquivo: models.py, do django.
				migrate - sincroniza o banco de dados com as novas migraçoes (alterações feitas no arquivo models.py).
				runserver - roda o servidor local do projeto django.
				sendtestemail -
				shell - inicializa um interpretador Python interativo.
				showmigrations -
				sqlflush -
				sqlmigrate -
				sqlsequencereset -
				squashmigrations -
				startapp - cria novas apps (cria novos módulos em um projeto).
				startproject - cria novos projetos.
				test - roda os testes da aplicação.
				testserver -


	    A pasta nomeDoProjeto é o nosso projeto. É dentro dela que criaremos os módulos (chamados de 
	    app pelo django), onde cada app representa uma parte (ou seja, um módulo) da aplicação django.  

			OBS: PODEMOS TER VÁRIAS APLICAÇÕES EM UM MESMO PROJETO !!!

			OBS2: QUANDO OS APPS FOREM CRIADOS, É NECESSÁRIO CRIAR DENTRO DA PASTA DO APP UMA PASTA templates 
			COM UMA PASTA DENTRO, DE MESMO NOME DO APP, EXEMPLO:

		    	nomeDoApp/templates/nomeDoApp

		A pasta nomeDoApp (QUE ESTÁ DENTRO DE templates) será usada para inserir as páginas html da aplicação.



	============================================================
	conhecendo os arquivos iniciais de um projeto django 
	gerado pelo comando: django-admin startproject nomeDoProjeto
	============================================================

		Dentro da pasta "nomeDoProjeto", teremos os arquivos...

			__init__.py - arquivo que indica que a pasta nomeDoProjeto é um pacote python.

			settings.py - arquivo que fazemos as configurações do projeto django.

				dentro do aquivo settings.py temos:

					BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__))) - guarda o
					caminho do seu projeto no sistema operacional.


					SECRET_KEY = '1c8@wsr+gyau^5=e1_gq^a=smh!@d#3r3l8m0-sd88gxuzwa3&' - usado para 
					criptografar dados do sistema django, como: senhas, etc...


					DEBUG = True - usado para ativar ou desativar o modo de desenvolvimento 
					do projeto. Se DEBUG estiver com valor True, então está no modo desenvolvimento
					do projeto.


					ALLOWED_HOSTS = [] - usado para inserir o(s) dominio(s) da aplicação django.


					INSTALLED_APPS = [] - usado para listar as aplicações instaladas. É aqui que INSERIMOS
					AS APLICAÇÕES QUE CRIAMOS no django para que o django possa usa-las.

						por padrão, o django já vem com algumas aplicações, veja abaixo:

					        'django.contrib.admin',
					        'django.contrib.auth',
					        'django.contrib.contenttypes',
					        'django.contrib.sessions',
					        'django.contrib.messages',
					        'django.contrib.staticfiles',


					MIDDLEWARE = [] - usado para validação de sessão do usuário, validação de 
					segurança, etc..., no django.

						por padrão, o django já vem com algumas validações, veja abaixo:

							'django.middleware.security.SecurityMiddleware',
				    	    'django.contrib.sessions.middleware.SessionMiddleware',
				    	    'django.middleware.common.CommonMiddleware',
				    	    'django.middleware.csrf.CsrfViewMiddleware',
				    	    'django.contrib.auth.middleware.AuthenticationMiddleware',
				    	    'django.contrib.messages.middleware.MessageMiddleware',
				    	    'django.middleware.clickjacking.XFrameOptionsMiddleware',



				   	ROOT_URLCONF = 'projeto1.urls' - configura o arquivo inicial por onde o django começará 
				   	a pegar as urls do projeto.


				   	TEMPLATES = [] - lugar onde é feita as CONFIGURAÇÕES para uso de templates.

				   		por padrão, o django já vem com a configuração praticamente pronta, veja abaixo:

				   			[
						        {
						            'BACKEND': 'django.template.backends.django.DjangoTemplates',
						            'DIRS': [],
						            'APP_DIRS': True,
						            'OPTIONS': {
						                'context_processors': [
						                    'django.template.context_processors.debug',
						                    'django.template.context_processors.request',
						                    'django.contrib.auth.context_processors.auth',
						                    'django.contrib.messages.context_processors.messages',
						                ],
						            },
						        },
						    ]


						WSGI_APPLICATION = 'projeto1.wsgi.application' - a aplicação django será 
						executada por esse arquivo quando colocarmos a aplicação pronta, em
						um servidor na web.


						DATABASES = {} - configura o banco de dados da aplicação.

							por padrão, o django já vem com uma configuração de banco de dados, é
							com o banco de dados: sqlite3 (que é do python), mas podemos configurar
							outros bancos de dados como: mysql, postgreSQL, oracle, etc...

								{
						    	    'default': {
						    	        'ENGINE': 'django.db.backends.sqlite3',
						    	        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
						    	    }
						    	}


						AUTH_PASSWORD_VALIDATORS = [] - armazena configurações de validação de senhas.

							por padrão, o django já vêm com essas validações de senhas.

								[
						    	    {
						    	        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
						    	    },
						    	    {
						    	        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
						    	    },
						    	    {
						    	        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
						    	    },
						    	    {
						    	        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
						    	    },
						    	]




						LANGUAGE_CODE = 'en-us' - muda o idioma do projeto django.

						TIME_ZONE = 'UTC' - muda o timezone da aplicação.

						USE_I18N = True - 

						USE_L10N = True - 

						USE_TZ = True - 

						STATIC_URL = '/static/' - url onde iremos inserir os arquivos estáticos da 
						aplicação, como por exemplo: css, javascript, etc...



			urls.py - arquivo onde será inserida as urls de cada aplicação do nosso projeto.

				por padrão, o arquivo urls.py vem assim:

					from django.contrib import admin
				    from django.urls import path
				    
				    urlpatterns = [
				        path('admin/', admin.site.urls), #url da área admin do djando...
				    ]



			wsgi.py - arquivo que será executado quando colocarmos a aplicação pronta, em 
			um servidor na internet.


		Agora, fora da pasta "nomeDoProjeto", teremos o arquivo:

			manage.py - arquivo usado para o gerenciamento do projeto, como por exemplo: criar 
			superusuario, criar migrações (usando os comandos: makemigrations e migrate), rodar o 
			servidor local do django, etc...



	==================================
	criando o primeiro app do projeto
	==================================

		Dentro do nosso projeto, vamos criar um app para controle de gastos. basicamente o
		nosso app terá um formulário onde será mostrado:

			- a catergoria da despesa 
			- o valor da despesa
			- e a data da despesa

		quando clicarmos em salvar, esses dados irão para o banco de dados, e então 
		criaremos uma tela de listagem dos nossos gastos, será um app bem simples mesmo!!!


		Dentro da pasta "nomeDoProjeto", com o ambiente virtual ativado, digite o comando:

			python3 manage.py startapp nomeDoApp
				
				OBS: no nosso caso, o nome do nosso app será: contas


		Após digitar o comando acima, será criado uma pasta (essa pasta é a do nosso app),
		e dentro dessa pasta, por padrão, terá os arquivos:

			- migrations - é uma pasta que armazenará versões de migração (feitos com 
			o comando migrate) ao inserir classes no arquivo models.py.

			- __init__.py - arquivo que indica que o app é um pacote python.

			- admin.py - registra nossa aplicação dentro do admin.

			- apps.py - 

			- models.py - arquivo onde INSERIMOS AS CLASSES que se tornarão 
			as tabelas no banco de dados.

			- tests.py - 

			- views.py - arquivo onde vamos INSERIR AS FUNÇÕES que serão executadas 
			pelo arquivo urls.py.


	Sempre que criamos um app, a primeira coisa que devemos fazer é ir até o 
	arquivo: settings.py DO NOSSO PROJETO (que fica dentro da pasta nomeDoProjeto) e
	inserir o nome do nosso app, seguido de uma virgula (assim: nomeDoApp,) como 
	último item do array: INSTALLED_APPS, para que o django saiba que o 
	app que criamos tbm é um app do projeto nomeDoProjeto. 


	Vamos agora, criar o banco de dados da nossa aplicação.

		na janela do terminal, digite o comando:

			python3 manage.py migrate


	com o comando acima, o django criará todas as tabelas padrão que vem no 
	django, lá no banco de dados do django (PQ ATÉ AGORA NÃO CRIAMOS NENHUMA
	CLASSE NO ARQUIVO: models.py. Quando criarmos as nossas classes no 
	arquivo: models.py, AS NOSSAS CLASSES SE TORNARÃO TBM TABELAS no banco de dados).

	
	Vamos agora rodar o servidor local do django, para saber se a nossa aplicação
	está funcionando corretamente.

		na janela do terminal, digite o comando:

			python3 manage.py runserver


	com o comando acima acionado, digite no navegador o link: 

		http://127.0.0.1:8000/


	se vc ver a imagem de um foguete do django, significa que a aplicação está 
	funcionando corretamente, parabéns !!!, continuando...


	pare de rodar o servidor local com as teclas: 

		CTRL + C
	

	e vamos agora criar um usuario para logar na aplicação django, 
	digitando o comando:

			python3 manage.py createsuperuser


	ao digitar o comando acima, será acionado um prompt no terminal pedindo para 
	configurar um nome de usuário, assim:

		Username (leave bank to use 'django'): 


	escolha o nome que quiser, caso deixe em branco, o nome padrão será: django


	em seguida, o prompt pedirá para inserir um email (podemos deixar em branco)

		Email address:


	em seguida, o prompt pedirá para configurar uma senha:

		Password: 


	em seguida, o prompt pedirá para confirmar a senha digitada:

		Password (again):


	e pronto, um usuário foi criado para logar na aplicação, parabens!!! \0/


	Para podermos usar o login e a senha criadas, vamos novamente rodar o servidor local,
	digitando o comando:

			python3 manage.py runserver


	Agora, vá até o navegador e digite na barra de endereço o link:

		http://127.0.0.1:8000/admin

			OBS: esse /admin é um endereço de url criado por padrão pelo django, 
			configurado no arquivo: urls.py, em nomeDoProjeto.


	se vc digitar o login e a senha que acabou de criar, vc conseguirá entrar na área 
	administrativa do app do django.



	===============================
	Entendendo o arquivo urls.py
	===============================

		Antes de entendermos o padrão MTV (Model, Template, View) do django, TEMOS QUE
		ENTENDER COMO FUNCIONA O ARQUIVO: urls.py, do projeto: "nomeDoProjeto", pq é ele 
		que se comunica com o arquivo: views.py.

			OBS: o arquivo views.py é o responsável por MOSTRAR OS TEMPLATES 
			DO DJANGO (isso será explicado mais a frente neste documento).

		o arquivo urls.py, é o arquivo RESPONSÁVEL POR DEFINIR AS urls DE CADA APLICAÇÃO 
		CRIADA NO PROJETO django, e responsável por CHAMAR AS FUNÇÕES CRIADAS 
		NO ARQUIVO: views.py.

			por padrão, o arquivo urls.py vem assim:


				from django.contrib import admin
			    from django.urls import path
			    
			    urlpatterns = [
			        path('admin/', admin.site.urls),			        
			    ]


		É dentro do array urlpatterns = [], onde definimos dentro da função path() o CAMINHO
		DA url ENTRE ASPAS NO PRIMEIRO PARÂMETRO (como por exemplo: 'admin/'), e definimos
		a FUNÇÃO QUE SERÁ EXECUTADA E LINKADA Á URL, DEFINIDA NO SEGUNDO PARÂMETRO do 
		método path().

			OBS: a funcionalidade: admin.site.urls é a única funcionalidade QUE NÃO VÊM 
			DO ARQUIVO views.py

			OBS2: as funções definidas (no segundo parâmetro do método path()), são criadas 
			no arquivo: views.py). 

		isso significa que, ao digitarmos o caminho da url no navegador, A FUNÇÃO LINKADA Á
		URL (DEFINIDA NO SEGUNDO PARÂMETRO DO MÉTODO path(), lá no arquivo: urls.py), será 
		executada, e mostado o conteúdo dessa função no navegador. 


			OBS: o arquivo views.py é o responsável por mostrar os templates do django,
			ou seja, é no arquivo views.py que criamos funções para que as páginas 
			html DA(S) NOSSA(S) APLICAÇÃO(ÇÕES) sejam exibidas no navegador.




	=======================
	definindo novas urls 
	no arquivo urls.py
	=======================

		vamos agora no arquivo urls.py DA APLICAÇÃO contas, DEFINIR UMA NOVA url 
		para uma NOVA PÁGINA, o código ficará assim:

			from django.contrib import admin
		    from django.urls import path

		    # definindo o caminho até o arquivo views.py e importando a função home
		    from contas.view import home 
		    
		    urlpatterns = [
		        path('admin/', admin.site.urls),
		        path('contas/', home),	#criando a url e chamando a função home em views.py		        
		    ]


		e no arquivo views.py, defina a função home, assim:

			from django.http import HttpResponse
			import datetime

			def home(request):
				now = datetime.datetime.now()
				html = "<html><body>It is now %s.</body></html>" % now
				return HttpResponse(html)


		agora, execute o servidor local, com o comando:

			python3 manage.py runserver


		e insira o link abaixo no navegador:


			http://127.0.0.1:8000/contas/


		e veja o resultado abaixo: \0/

			It is now 2020-06-19 15:47:44.353516.



	============================
	Retornando um template
	============================

		devemos agora, DENTRO DA NOSSA APLICAÇÃO (que no nosso caso, tem o nome de: contas), 
		criar uma pasta de nome: templates (tem que ser exatamente esse nome: templates), e 
		dentro desta pasta templates, criarmos uma pasta com o mesmo nome da aplicação (ou seja, 
		com o nome: contas) para inserirmos as páginas html.

			o caminho das pastas ficará assim:

				contas/templates/contas


		Vamos ALTERAR O CONTEÚDO DO ARQUIVO urls.py (arquivo da pasta "nomeDoProjeto"),
		na mesma função home(), configurando a função home() para retornar um 
		template (template é um arquivo de pagina html).

		a função home() no arquivo urls.py ficará assim:


			# importando o método render
			from django.shrotcuts import render
			import datetime

			def home(request):
				
				return render(request, 'contas/home.html')


		agora, lá na pasta contas (pasta que está DENTRO DA PASTA templates, NA 
		NOSSA APLICAÇÂO: contas) vamos inserir um arquivo chamado: home.html

		o arquivo home.html ficará assim:

		 	<!DOCTYPE html>
			<html lang="en">
			<head>
				<meta charset="UTF-8">
				<title>Document</title>
			</head>
			<body>

				<h1>Seja bem-vindo</h1>
				
			</body>
			</html>


		agora, execute o servidor local, com o comando:

			python3 manage.py runserver


		e insira o link abaixo no navegador:


			http://127.0.0.1:8000/home/


		e aparecerá o texto definido na tag <h1> da página:

			Seja bem-vindo



	===============================
	Entendendo o arquivo models.py
	===============================

		o arquivo models.py é o arquivo responsável por armazenar as classes que 
		serão usadas para gerar as tabelas no banco de dados. 

		na nossa aplicação contas, no arquivo models.py, vamos criar uma classe 
		chamada: Categoria, que será usada para a separação de gastos.

		a estrutura da classe ficará assim:
			
			from django.db import models


			class Categoria(models.Model):

				nome = models.CharField(max_lenght=100)
				dt_criacao = models.DateTimeField(auto_now_add=True)



			OBS: para a criação dos campos das classes, o django possui uma 
			variedade de campos (fields) criados pela classe: model.Model, 
			para serem usados em classes. É com esses fields que vc deve 
			configurar os atributos da(s) classe(s). Procure na documentação 
			do django sobre fields, no link abaixo:

				https://docs.djangoproject.com/en/3.0/ref/models/fields/#field-types


			OBS2: todas as classes no arquivo models.py tem que receber uma
			herança de models.Model nos parênteses. 


		agora, vamos digitar o comando abaixo:

			python3 manage.py makemigrations


		o que o comando makemigrations faz?, verifica todas as alterações feitas no 
		arquivo models.py e CRIA UM ARQUIVO (parecido com esse nome: 0001_initial.py) DENTRO 
		DA PASTA migrations (essa pasta fica DENTRO DA APLICAÇÃO, que DESCREVE COMO 
		O DJANGO DEVE CRIAR AS TABELAS no banco de dados.

			OBS: a pasta migrations dentro dos apps, armazena arquivos descrevendo 
			como o django deve criar as tabelas no banco de dados. toda vez que vc 
			roda o comando: python3 manage.py makemigrations, é gerado um novo 
			arquivo (parecido com esse nome: 0001_initial.py), onde cada arquivo desse, 
			se torna uma espécie de histórico, onde podemos saber quais foram as MUDANÇAS 
			FEITAS ANTERIORMENTE NO ARQUIVO models.py, que foram aplicadas no banco de dados.
			 

		após o comando makemigrations, digitamos o comando abaixo:

			python3 manage.py migrate	


		o que o comando migrate faz?, IMPLEMENTA TODAS AS ALTERAÇÕES (todas as 
		alterações feitas A PARTIR DO ÚLTIMO ARQUIVO GERADO NA PASTA migrations, 
		ao usar o comando: python3 manage.py makemigrations), criando as tabelas no 
		banco de dados.


		DICA: para testar (e visualizar) se as tabelas foram criadas no banco de 
		dados, podemos IMPORTAR O ARQUIVO models.py (que fica dentro da aplicação)
		PARA O ARQUIVO admin.py (arquivo que fica dentro da aplicação tbm).

		o código no arquivo admin.py ficará assim:

			from django.contrib import admin
			from .models import Categoria


			admin.site.register(Categoria)



		Vamos agora, rodar o servidor local:

			python3 manage.py runserver


		e digitar o link abaixo no navegador:

			127.0.0.1/admin/


		e veremos no setor: contas (contas é o nosso app), a classe: Categoria. 


		Se clicarmos em categoria, podemos adicionar uma nova categoria
		de gastos, como por exemplo: Despesas Gerais. Apos a adição da 
		categoria, o django já lista as opções de categorias cadastradas
		no banco. No caso dessa aplicação simples que fizemos, PODEMOS 
		SOMENTE ALTERAR e DELETAR as categorias criadas, e estamos fazendo
		isso, diretamente no banco de dados. \0/


		vamos agora implemantar a classe Transação no arquivo: models.py.

		a estrutura da classe ficará assim:

			class Transacao(models.Model):

				data = models.DateTimeField()
				descricao = models.Charfield(max_lenght=200)
				valor = models.DecimalField(max_digits=7, decimal_places=2)
				categoria = models.ForeignKey(Categoria, on_delete=models.CASCADE)
				observacoes = models.TextField(null=True, blank=True)

				# classe usada para exibir o nome de um campo da classe no plural
				class Meta:
					verbose_name_plural = 'Transacoes'

				# funcao usada para exibir um atributo da classe
				def __str__(self):
					return self.descricao


		Veja como o arquivo models.py deve ficar por completo, ao inserir 
		a classe Transacao:

			from django.db import models


			class Categoria(models.Model()):

			 	nome = models.CharField(max_lenght=100)
			 	dt_criacao = models.DateTimeField(auto_now_add=True)

			 	# funcao usada para exibir um atributo da classe
			 	def __str__(self):
			 		return self.nome 


			class Transacao(models.Model):

				data = models.DateTimeField()
				descricao = models.CharFIeld(max_length=200)
				valor = models.DecimalField(max_digits=7, decimal_places=2)
				categoria = models.ForeignKey(Categoria, on_delete=models.CASCADE)
				observacoes = models.TextField(null=True, blank=True)

				# classe usada para exibir o nome de um campo da classe no plural
				class Meta:
					verbose_name_plural = 'Transacoes'

				# funcao usada para exibir um atributo da classe
				def __str__(self):
					return self.descricao


		vamos agora preparar as alterações feitas no arquivo models.py,
		(para depois aplicarmos essas alterações no banco de dados), usando o 
		comando abaixo:

			python3 manage.py makemigrations


		agora, vamos aplicar essas alterações (preparadas do arquivo manage.py), no 
		banco de dados, usando o comando abaixo:

			python3 manage.py migrate


		e por último, vamos agora no arquivo admin.py (do nosso app: contas) e registramos
		a classe Transacao á área de administrador.

			insira as linhas abaixo no arquivo admin.py:
				
				from .models import Categoria


				admin.site.register(Categoria)


		Veja como o arquivo admin.py deve ficar por completo:

			from django.contrib import admin
			from .models import Categoria
			from .models import Transacao

			admin.site.register(Categoria)
			admin.site.register(Transacao)



		vamos agora executar o servidor local:

			python3 manage.py runserver


		digite o endereco abaixo no navegador:

			127.0.0.1/admin


		e vc verá que as classes criadas no banco de dados aparecem na página de
		administrador da aplicação.  \0/



	==============================
	entendendo o arquivo views.py
	==============================

		o arquivo views.py é o responsável por mostrar os templates do django, 
		ou seja, é no arquivo views.py que CRIAMOS FUNÇÕES para que AS PÁGINAS 
		html DA(S) NOSSA(S) APLICAÇÃO(ÇÕES) sejam exibidas no navegador.

		vamos agora, dar uma olhada em exemplos do que PODE SER FEITO NAS 
		FUNÇÕES CRIADAS NO ARQUIVO: views.py.

			ex1:

				from django.shortcuts import render
				import datetime


				def home(request):
					data = {}

					data['now'] = datetime.datetime.now()
					return render(request, 'contas/home.html', data)


		quando a gente cria variáveis (que no nosso caso, o valor é um dicionario) em 
		uma função no arquivo views.py, e inserimos essa variável (no terceiro 
		parâmetro) da função render(), NÓS TEREMOS ACESSO Á ESSAS VARIÁVEIS NO NOSSO 
		ARQUIVO DE template (que é o arquivo html que foi inserido no segundo parâmetro da 
		função render(), que no nosso caso, é o arquivo: home.html).

		isso é possível pq o django disponibiliza pra gente, uma linguagem interna do 
		django chamada: djinja. Essa linguagem possui uma série de sintaxe(s) que 
		possibilita que a gente: 

			- leia variáveis
			- crie loops (for e while)
			- crie if/elif/else
			- etc...

		
		entre outras coisas, que ainda serão mostradas mais adiante.
			
			OBS: link da documentação djinja: https://jinja.palletsprojects.com/en/2.11.x/


		depois de inserida a função home() que criamos no ex1, no arquivo: views.py, 
		vamos inserir o código abaixo, no arquivo: home.html (arquivo que fica na
		pasta conta, DENTRO DA PASTA templates):

			<!DOCTYPE html>
			<html lang="en">
			<head>
				<meta charset="UTF-8">
				<title>Document</title>
			</head>
			<body>
				
				<h1>Seja bem vindo</h1>

				<p>Agora são: {{ now }}</p> # sintaxe djinja
			
			</body>
			</html>


		repare que, no arquivo home.html, INSERIMOS ENTRE CHAVES DUPLAS, UMA CHAVE DE 
		UM DICIONÁRIO:

			essa é a sintaxe djinja para variáveis: {{ now }}


		é assim que declaramos chaves de um dicionário (isso serve para variáveis tbm) em
		um documento html usando a sintaxe djinja.



		Vamos agora para um segundo exemplo de código, mostrando como exibir dados de 
		um array, usando a sintaxe djinja:

			ex2:

				from django.shortcuts import render
				import datetime


				def home(request):
					data = {}
					data['transacoes'] = ['t1', 't2', 't3']

					data['now'] = datetime.datetime.now()
					return render(request, 'contas/home.html', data)


		depois de inserida a função home() que criamos no ex2, no arquivo: views.py, 
		vamos inserir o código abaixo, no arquivo: home.html:

			<!DOCTYPE html>
			<html lang="en">
			<head>
				<meta charset="UTF-8">
				<title>Document</title>
			</head>
			<body>
				
				<h1>Seja bem vindo</h1>

				<p>Agora são: {{ now }}</p>

				# exibindo um array com um loop for
				{% for transacao in transacoes %}
					{{ transacao }}
				{% endfor %}
			
			</body>
			</html>


		repare que, no arquivo home.html inserimos um loop for. Essa estrutura do 
		loop for, foi feita com a sintaxe da linguagem djinja.

			essa é a sintaxe djinja para loops for:

				{% for transacao in transacoes %}
					{{ transacao }}
				{% endfor %}


		ainda no ex2, no arquivo home.html, podemos criar uma lista html, com
		as tags html: <ul><li></li></ul>, usando o mesmo loop for, da sintaxe do djinja:

			OBS: cole o código abaixo por cima do loop for, no arquivo: home.html 

				<ul> 
					{% for transacao in transacoes %}
						<li> {{ transacao }} </li>
					{% endfor %}
				</ul> 


		ou, ainda no ex2, no arquivo home.html, podemos criar uma lista html, com
		um loop for, e dentro desse loop for, definirmos condicionais: if/else, usando
		a linguagem djinja:

			<ul> 
				{% for transacao in transacoes %}

					{% if transacao == "t1" %}
						<li><b>{{ transacao }}</b></li> #aqui ficará em negrito
					{% else %}
						<li> {{ transacao }} </li>
					{% endif %}
				{% endfor %}
			</ul>





		material retidado do Curso: Django 2.0 - Aprendendo os conceitos fundamentais,
		na sessão 2: primeiros passos no django. 









